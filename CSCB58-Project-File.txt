CSCB58 Project File: Winter 2018

Team Member A
-------------
First Name: Ruyin
Last Name: Zhang 
Student Number: 1002005883
UofT E-mail Address: ruyin.zhang@mail.utoronto.ca


Team Member B
-------------
First Name: Radu
Last Name: Laudat
Student Number: 1002394063
UofT E-mail Address: radu.laudat@mail.utoronto.ca

Team Member C
-------------
First Name: Julian	
Last Name: Barker
Student Number: 1002428036
UofT E-mail Address: julian.barker@mail.utoronto.ca

Team Member D 
-------------
First Name: Brian
Last Name: Liao
Student Number: 1002574038
UofT E-mail Address: b.liao@mail.utoronto.ca

Project Details
---------------
Project Title: Tic-Tac-Toe

Project Description:   The computer will generate two vertical lines perpendicular to two horizontal lines on the screen, thereby forming a 3x3 grid. Two players will take turns putting red and green symbol into a square of their choice in the grid. The player who gets three red symbols or three green symbols in a row first (horizontal, vertical or diagonal) wins the game. When player1 wins the game, LEDG[6] will light up to announce the winner. When player2 wins, the LEDG[7] will go on. Players need to do illegal move checking before they load and draw a position to the grid. When a position that the player attempts to draw has been occupied, the LED light above SW[14] will light up as a warning. If the player proceed to draw the illegal position after warning, the game will see it as the player skip his/her current round. 

 What the grid resembles.
	| 0 | 1 | 2 |
	| 3 | 4 | 5 |
	| 6 | 7 | 8 |

Players use switches to indicate which position they want to mark on the grid in each round. Player1 uses SW[3:0]. Player2 uses SW[7:4].
After having the correct switches to represent the position the player desire to mark, player shall do illegal check by flipping SW[14] up. If it’s a legal move, the player could then load the value in by flipping SW[17] and then draw the position to the screen using SW[16].  



Video URL: https://youtu.be/z48PhWqzRQw

Code URL (please upload a copy of this file to your repository at the end of the project as well, it will
serve as a useful resource for future development):https://github.com/julianb393/Tic_Tac_Toe/blob/master/TicTacToe.v


Proposal
--------

What do you plan to have completed by the end of the first lab session?:
- Be able to generate the background image of the game in .mif format and be able to draw something to the screen randomly using switches. 

What do you plan to have completed by the end of the second lab session?:
- Have a counter to keep track of the time each player used in each round of game. 

What do you plan to have completed by the end of the third lab session?
- Players have the ability to put red or green on the grid by flipping the corresponding switches. LEDG[7] light up when player2 wins the game and LEDG[6] light up when player1 wins. 

What is your backup plan if things don't work out as planned?

- If all else fails, our group will pursue the development of a very infuriating game (on the player's end).
You as a player will be provided with a randomly generated lit up segment in one of the
7 HEX displays ranging from HEX1 to the end of the board.
Additionally, you will also be provided with a starting lit up segment in HEX0.
The objective will then be to shift the starting segment's position to match with
the end segments position by the time the game's logic pushes your segment all the
way to the end HEX display. If you succeed in doing this, the next iteration will
move your initial segment to the end segment at a much faster rate thus making
the game more difficult and intense.

What hardware will you need beyond the DE2 board?
(be sure to e-mail Brian if it's anything beyond the basics to make sure there's enough to go around)
All we need is an additional monitor with a VGA cable.
- A VGA monitor. 



Motivations
-----------
How does this project relate to the material covered in CSCB58?:

- In order to display any drawings for the tic tac toe game to a monitor, we need to
apply knowledge about data paths and VGA adapters.
- When a player put their marker into the grid, we need to incorporate finite
state machines and flip flops into our logic.
- When we detect a winner during the game, we need to use the logic gates we learned in this course. 
- We will need to apply the knowledge we learned in building registers and counters to build the
countdown timer for each player selection round in the game.



Why is this project interesting/cool (for CSCB58 students, and for non CSCB58 students?):
- For CSCB58 students, it provides an in depth look into the inner workings of a theoretically
simple game implemented in Verilog, and how useful the knowledge gained from the labs are.
- For non CSCB58 students, this game is an interactive substitute for traditional pen and paper tic tac toe
that may be used to demo or spark interest in hardware programming.



Why did you personally choose this project?:
- We chose this project because we mutually agreed that playing Tic Tac Toe is one of our most
beloved memories from our childhoods, so it would be a nice reminder of it to bring it back during
our university studies.



Attributions
------------
Provide a complete list of any external resources your project used (attributions should also be included in your
code).

Our project is inspired by
1) http://www.fpga4student.com/2017/06/tic-tac-toe-game-in-verilog-and-logisim.html
2) https://github.com/JuJuLY/TicTacToe-verilog

There are a few lines of code in the control module that is taken directly from source 2) (see above)
along with the file "grid2.mif", that generates our background. source 1) was solely used
as a guide on how to check for a winning state.



Updates
-------
Week 1: We implemented a feature that enables a user render a pixel with color to specified x
and y coordinates. We had a little bit of trouble with the finite state machine. As a result,
we were unable to repaint the background image after the user pressed the reset button.
It took us longer to debug than we expected, so we were unable to finish the project plan
for this week. However, we will continue to work on the remaining features next week.

Week 2: We created a countdown timer that keeps track of the time that a
player spends on each round of the game. We painted our Tic Tac Toe background
using Microsoft Paint and converted it to .mif file with the corresponding width
and depth that fits the screen resolution and memory. However, we ended up not
being happy with the results so we used someone else's generated file (source 2)).

Week3: We implemented the finite state machine to enable player1 to draw
a red pixel (representing Xs) on their turn and player2 to draw a green pixel (represents Os) as well.
We wrote modules to check the winning status constantly and we output LEDG6
light accordingly. If player1 wins, LEDG7 will light up. Similarly, if player2 wins,
LEDG7 will light up. If there is no winner, i.e. all quadrants are filled but there is
no victor, then both LEDG6 and LEDG7 will remain off.

Week4: we added illegal move checking for each position that player attempts to
place. SW[14] is dedicated to the legal move checking. Before a player can load
and draw their position, they need to check if it is a valid move by setting SW[14] to high.
If the desired quadrant is occupied, the LED light above SW[14] will turn on as a warning.
The player will then have to select a new position to proceed the game.
We modified the finite state machine accordingly in order to make the illegal move
checking works. We also added LED lights to indicate the switches that players
will be using during the game.
